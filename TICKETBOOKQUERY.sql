CREATE TABLE Venue (
    venue_id INT PRIMARY KEY IDENTITY(1,1),
    venue_name VARCHAR(100) NOT NULL,
    address VARCHAR(255)
);


CREATE TABLE Booking (
    booking_id INT PRIMARY KEY IDENTITY(1,1),
    customer_id INT NOT NULL,
    event_id INT NOT NULL,
    num_tickets INT CHECK (num_tickets > 0),
    total_cost DECIMAL(10, 2) NOT NULL,
    booking_date DATE DEFAULT GETDATE()
);





CREATE TABLE Customer (
    customer_id INT PRIMARY KEY IDENTITY(1,1),
    customer_name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone_number VARCHAR(15),
    booking_id INT
);



CREATE TABLE Event (
    event_id INT PRIMARY KEY IDENTITY(1,1),
    event_name VARCHAR(100) NOT NULL,
    event_date DATE NOT NULL,
    event_time TIME NOT NULL,
    venue_id INT NOT NULL,
    total_seats INT NOT NULL CHECK (total_seats > 0),
    available_seats INT NOT NULL CHECK (available_seats >= 0),
    ticket_price DECIMAL(10,2) NOT NULL,
    event_type VARCHAR(50) CHECK (event_type IN ('Movie', 'Sports', 'Concert')),
    booking_id INT
);




ALTER TABLE Event
ADD CONSTRAINT FK_Event_Venue FOREIGN KEY (venue_id) REFERENCES Venue(venue_id);

ALTER TABLE Event
ADD CONSTRAINT FK_Event_Booking FOREIGN KEY (booking_id) REFERENCES Booking(booking_id);


ALTER TABLE Customer
ADD CONSTRAINT FK_Customer_Booking FOREIGN KEY (booking_id) REFERENCES Booking(booking_id);


ALTER TABLE Booking
ADD CONSTRAINT FK_Booking_Customer FOREIGN KEY (customer_id) REFERENCES Customer(customer_id);

ALTER TABLE Booking
ADD CONSTRAINT FK_Booking_Event FOREIGN KEY (event_id) REFERENCES Event(event_id);



DELETE FROM Booking;
DELETE FROM Customer;
DELETE FROM Event;
DELETE FROM Venue;

SELECT * FROM Booking;
SELECT * FROM Customer;
SELECT * FROM Event;
SELECT * FROM Venue;

--TASK-1
--2. SQL Query to List All Events
SELECT * FROM Event;
--3. SQL Query to Select Events with Available Tickets
SELECT * FROM Event WHERE available_seats > 0;
--4. SQL Query to Select Events Name Partial Match with ‘cup’
SELECT * FROM Event WHERE event_name LIKE '%cup%';
--5. SQL Query to Select Events with Ticket Price Range Between 1000 to 2500
SELECT * FROM Event WHERE ticket_price BETWEEN 1000 AND 2500;
--6. SQL Query to Retrieve Events with Dates Falling Within a Specific Range
SELECT * FROM Event WHERE event_date BETWEEN '2025-05-01' AND '2025-06-30';
--7. SQL Query to Retrieve Events with Available Tickets that Also Have "Concert" in Their Name
SELECT * FROM Event WHERE available_seats > 0 AND event_name LIKE '%Concert%';
--8. SQL Query to Retrieve Users in Batches of 5, Starting from the 6th User
SELECT * 
FROM Customer
ORDER BY customer_id
OFFSET 5 ROWS 
FETCH NEXT 5 ROWS ONLY;

--9. SQL Query to Retrieve Booking Details with Number of Tickets More Than 4
SELECT * FROM Booking WHERE num_tickets > 4;
--10. SQL Query to Retrieve Customer Information Whose Phone Number Ends with ‘000’
SELECT * FROM Customer WHERE phone_number LIKE '%000';
--11. SQL Query to Retrieve Events in Order Whose Seat Capacity is More Than 15000
SELECT * FROM Event WHERE total_seats > 15000 ORDER BY total_seats;
--12. SQL Query to Select Events Name That Does Not Start with ‘x’, ‘y’, or ‘z’
SELECT * FROM Event WHERE event_name NOT LIKE 'x%' AND event_name NOT LIKE 'y%' AND event_name NOT LIKE 'z%';



-- TASK 3: Aggregate Functions, Joins, Group By, Having, Order By

-- 1. Events and Their Average Ticket Prices
SELECT event_name, AVG(ticket_price) AS avg_price
FROM Event
GROUP BY event_name;

-- 2. Total Revenue Generated by Events
SELECT e.event_name, SUM(b.total_cost) AS total_revenue
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_name;

-- 3. Event with the Highest Ticket Sales
SELECT TOP 1 e.event_name, SUM(b.num_tickets) AS total_tickets
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_name
ORDER BY total_tickets DESC;

-- 4. Total Tickets Sold per Event
SELECT e.event_name, SUM(b.num_tickets) AS tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_name;

-- 5. Events with No Ticket Sales
SELECT e.event_name
FROM Event e
LEFT JOIN Booking b ON e.event_id = b.event_id
WHERE b.booking_id IS NULL;

-- 6. User Who Booked the Most Tickets
SELECT TOP 1 c.customer_name, SUM(b.num_tickets) AS total_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name
ORDER BY total_tickets DESC;

-- 7. Events and Total Tickets Sold per Month
SELECT DATENAME(MONTH, b.booking_date) AS month_name, e.event_name, SUM(b.num_tickets) AS total_tickets
FROM Booking b
JOIN Event e ON b.event_id = e.event_id
GROUP BY DATENAME(MONTH, b.booking_date), e.event_name
ORDER BY month_name;

-- 8. Average Ticket Price per Venue
SELECT v.venue_name, AVG(e.ticket_price) AS avg_price
FROM Venue v
JOIN Event e ON v.venue_id = e.venue_id
GROUP BY v.venue_name;

-- 9. Tickets Sold per Event Type
SELECT e.event_type, SUM(b.num_tickets) AS total_tickets
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_type;

-- 10. Revenue by Year
SELECT YEAR(e.event_date) AS year, SUM(b.total_cost) AS revenue
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY YEAR(e.event_date);

-- 11. Users with Multiple Bookings
SELECT c.customer_name
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name
HAVING COUNT(DISTINCT b.event_id) > 1;

-- 12. Revenue by User
SELECT c.customer_name, SUM(b.total_cost) AS total_revenue
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name;

-- 13. Average Ticket Price by Category and Venue
SELECT e.event_type, v.venue_name, AVG(e.ticket_price) AS avg_price
FROM Event e
JOIN Venue v ON e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name;

-- 14. Users and Total Tickets in Last 30 Days
SELECT c.customer_name, SUM(b.num_tickets) AS total_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
WHERE b.booking_date >= DATEADD(DAY, -30, GETDATE())
GROUP BY c.customer_name;

-- TASK 4: Subqueries

-- 1. Avg Ticket Price per Venue Using Subquery
SELECT venue_name, (
    SELECT AVG(ticket_price) FROM Event e WHERE e.venue_id = v.venue_id
) AS avg_price
FROM Venue v;

-- 2. Events with More Than 50% Tickets Sold
SELECT event_name
FROM Event
WHERE (total_seats - available_seats) > (total_seats / 2);

-- 3. Total Tickets Sold per Event
SELECT e.event_name, (
    SELECT SUM(b.num_tickets) FROM Booking b WHERE b.event_id = e.event_id
) AS tickets_sold
FROM Event e;

-- 4. Users Who Have Not Booked Tickets
SELECT *
FROM Customer c
WHERE NOT EXISTS (
    SELECT 1 FROM Booking b WHERE b.customer_id = c.customer_id
);

-- 5. Events with No Ticket Sales Using NOT IN
SELECT *
FROM Event
WHERE event_id NOT IN (SELECT event_id FROM Booking);

-- 6. Tickets per Event Type Using Subquery in FROM
SELECT event_type, SUM(total_tickets) AS total
FROM (
    SELECT e.event_type, b.num_tickets AS total_tickets
    FROM Event e JOIN Booking b ON e.event_id = b.event_id
) AS temp
GROUP BY event_type;

-- 7. Events Priced Higher Than Avg Price
SELECT *
FROM Event
WHERE ticket_price > (
    SELECT AVG(ticket_price) FROM Event
);

-- 8. Revenue by User Using Correlated Subquery
SELECT c.customer_name,
       (SELECT SUM(b.total_cost) FROM Booking b WHERE b.customer_id = c.customer_id) AS revenue
FROM Customer c;

-- 9. Users Booking Tickets in a Given Venue
SELECT *
FROM Customer c
WHERE EXISTS (
    SELECT 1
    FROM Booking b
    JOIN Event e ON b.event_id = e.event_id
    WHERE b.customer_id = c.customer_id AND e.venue_id = 1
);

-- 10. Tickets Sold per Event Category Using Subquery
SELECT event_type, SUM(tickets_sold) AS total_tickets
FROM (
    SELECT e.event_type, b.num_tickets AS tickets_sold
    FROM Event e
    JOIN Booking b ON e.event_id = b.event_id
) AS t
GROUP BY event_type;

-- 11. Users with Bookings in Each Month
SELECT DISTINCT c.customer_name
FROM Customer c
WHERE EXISTS (
    SELECT 1
    FROM Booking b
    WHERE b.customer_id = c.customer_id AND MONTH(b.booking_date) IS NOT NULL
);

-- 12. Avg Ticket Price per Venue Using Subquery (repeated intentionally)
SELECT v.venue_name, (
    SELECT AVG(ticket_price) FROM Event e WHERE e.venue_id = v.venue_id
) AS avg_price
FROM Venue v;

